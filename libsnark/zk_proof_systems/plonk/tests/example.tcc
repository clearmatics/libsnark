/** @file
 *****************************************************************************
 * @author     This file is part of libff, developed by Clearmatics Ltd
 *             (originally developed by SCIPR Lab) and contributors
 *             (see AUTHORS).
 * @copyright  MIT license (see LICENSE file)
 *****************************************************************************/
#ifndef LIBSNARK_ZK_PROOF_SYSTEMS_PLONK_TESTS_EXAMPLE_TCC_
#define LIBSNARK_ZK_PROOF_SYSTEMS_PLONK_TESTS_EXAMPLE_TCC_

/// Instantiation of the test vector values from the Python implementation
/// of the Plonk protocol. \see example.hpp .

namespace libsnark
{

// the example class is defined specifically for the BLS12-381
// curve. This function checks that the template parameter ppT indeed
// corresponds to the bls12_381 curev i.e. is equal to
// libff::bls12_381_pp
template<typename ppT> void plonk_exception_assert_curve_bls12_381()
{
    const bool b_bls12_381 = std::is_same<ppT, libff::bls12_381_pp>::value;
    if (!b_bls12_381) {
        throw std::domain_error("Curve is not BLS12-381");
    }
}

plonk_example::plonk_example()
{
    using Field = libff::Fr<libff::bls12_381_pp>;
    using BaseField = libff::Fq<libff::bls12_381_pp>;

    // Circuit data

    // number of gates / constraints. we have 6 gates for the example
    // circuit + 2 dummy gates to make it a power of 2 (for the fft)
    this->num_gates = 8;

    // number of q-polynomials
    this->num_qpolys = 5;

    // hard-coded gates matrix for the example circuit P(x) = x**3 + x
    // + 5 = 3 Each column is a q-vector
    this->gates_matrix = {
        // q_L     q_R        q_M         q_O       q_C
        {Field(0), Field(0), Field(1), -Field("1"), Field(0)}, // mul
        {Field(0), Field(0), Field(1), -Field("1"), Field(0)}, // mul
        {Field(1), Field(1), Field(0), -Field("1"), Field(0)}, // add
        {Field(0), Field(1), Field(0), Field(0), -Field("5")}, // con5
        {Field(0), Field(1), Field(0), Field(0), Field(0)},    // PI
        {Field(1), Field(1), Field(0), -Field("1"), Field(0)}, // add
        {Field(0), Field(0), Field(0), Field(0), Field(0)},    // dummy
        {Field(0), Field(0), Field(0), Field(0), Field(0)},    // dummy
    };

    this->gates_matrix_transpose = {
        //  mul          mul          add          con5       PI add dum dum
        {Field(0),
         Field(0),
         Field(1),
         Field(0),
         Field(0),
         Field(1),
         Field(0),
         Field(0)}, // q_L
        {Field(0),
         Field(0),
         Field(1),
         Field(1),
         Field(1),
         Field(1),
         Field(0),
         Field(0)}, // q_R
        {Field(1),
         Field(1),
         Field(0),
         Field(0),
         Field(0),
         Field(0),
         Field(0),
         Field(0)}, // q_M
        {-Field("1"),
         -Field("1"),
         -Field("1"),
         Field(0),
         Field(0),
         -Field("1"),
         Field(0),
         Field(0)}, // q_O
        {Field(0),
         Field(0),
         Field(0),
         -Field("5"),
         Field(0),
         Field(0),
         Field(0),
         Field(0)}, // q_C
    };

    // witness values
    // w_L = a = [ 3,  9, 27,  1,  1, 30,  0,  0]
    // w_R = b = [ 3,  3,  3,  5, 35,  5,  0,  0]
    // w_O = c = [ 9, 27, 30,  5, 35, 35,  0,  0]
    // W = w_L + w_R + w_O
    this->witness = {
        3, 9,  27, 1, 1,  30, 0, 0, // w_L
        3, 3,  3,  5, 35, 5,  0, 0, // w_R
        9, 27, 30, 5, 35, 35, 0, 0  // w_O
    };

    // wire permutation (TODO: add function plonk_compute_permutation())
    this->wire_permutation = {9,  17, 18, 5,  4, 19, 7, 8,  10, 11, 1,  14,
                              21, 20, 15, 16, 2, 3,  6, 12, 22, 13, 23, 24};

    // public input (PI)
    this->public_input = Field(35);

    // index of the row of the PI in the non-transposed gates_matrix
    this->public_input_index = 4;

    // n-th root of unity omega in Fq (n=8 is the number of constraints
    // in the example). omega is a generator of the multiplicative
    // subgroup H.  Example (2**32)-th primitive root of unity in the
    // base field Fq of bls12-381 i.e. such that omega_base**(2**32) =
    // 1. The bls12-381 prime q is such that any power of 2 divides
    // (q-1). In particular 2**32|(q-1) and so the 2**32-th root of
    // unity exists.
    this->omega_base = Field("2367469443165877065961295211566080294796737370150"
                             "6253797663184111817857449850");

    // Constants k1,k2 to generate domains on which to evaluate the witness
    // polynomials. k can be random, but we fix it for debug to match
    // against the test vector values
    this->k1 = Field("706987411474581393682955260879121390206111740035659671471"
                     "3673571023200548519");
    // Similarly, k2 can be random, but we fix it to match the test
    // vectors
    this->k2 = libff::power(k1, libff::bigint<1>(2));

    // H_gen contains the generators of H, k1 H and K2 H in one place
    // ie. omega, omega_k1 and omega_k2
    this->H_gen = {
        Field("1"),
        Field("2367469443165877065961295211566080294796737370150625379766318411"
              "1817857449850"),
        Field("3465144826073652318776269530687742778270252468765361963008"),
        Field("8685283084174350996472453922654922162880456818468779543064782192"
              "722679779374"),
        Field("5243587517512619047944774050818596583769055250052763782260365869"
              "9938581184512"),
        Field("2876118074346741981983478839252516288972317879902138402494047458"
              "8120723734663"),
        Field("5243587517512619047598259568211231351891428296983989504433340623"
              "1173219221505"),
        Field("4375059209095183948297528658553104367481009568205885827953887650"
              "7215901405139"),
        Field("7069874114745813936829552608791213902061117400356596714713673571"
              "023200548519"),
        Field("6296993470737855411634321870255436387440388789676314980338138891"
              "26570754409"),
        Field("2134293230218433692027649469636827607837588105510789904753879922"
              "6396168459088"),
        Field("1267882965986156059121750719885063580789301664257248207931748295"
              "050157094180"),
        Field("4536600106038037654261818789939475193562943510017104110788998512"
              "8915380635994"),
        Field("5180617582805240493828430832116042219894651362156000632456984481"
              "0812010430104"),
        Field("3109294287294185355917124581181768975931467144541973877506485947"
              "3542412725425"),
        Field("5116799220914003442032598978830090225690125083627038961467191040"
              "4888424090333"),
        Field("1838592104783212022667877350171394113611392647210607993375145291"
              "4767234401351"),
        Field("3787649880178070211080878147767178500088988709179240616011656188"
              "3724775274403"),
        Field("2013895375313748245055634445236271583185979532535422332242782401"
              "9686639989507"),
        Field("2345700989319520162686183217527414661504655478998796606881532728"
              "3610815221310"),
        Field("3404995412729407025276896700647202470157662602842155788885220578"
              "5171346783162"),
        Field("1455937637334548836863895903051418083680066540873523166248709681"
              "6213805910110"),
        Field("3229692142198870802889139605582325000583075717517341450017583468"
              "0251941195006"),
        Field("2897886528193098885258590833291181922264399771053967175378833141"
              "6327765963203")};

    // H_gen permuted according to the wire permutation
    this->H_gen_permute = {
        Field("7069874114745813936829552608791213902061117400356596714713673571"
              "023200548519"),
        Field("1838592104783212022667877350171394113611392647210607993375145291"
              "4767234401351"),
        Field("3787649880178070211080878147767178500088988709179240616011656188"
              "3724775274403"),
        Field("5243587517512619047944774050818596583769055250052763782260365869"
              "9938581184512"),
        Field("8685283084174350996472453922654922162880456818468779543064782192"
              "722679779374"),
        Field("2013895375313748245055634445236271583185979532535422332242782401"
              "9686639989507"),
        Field("5243587517512619047598259568211231351891428296983989504433340623"
              "1173219221505"),
        Field("4375059209095183948297528658553104367481009568205885827953887650"
              "7215901405139"),
        Field("6296993470737855411634321870255436387440388789676314980338138891"
              "26570754409"),
        Field("2134293230218433692027649469636827607837588105510789904753879922"
              "6396168459088"),
        Field("1"),
        Field("5180617582805240493828430832116042219894651362156000632456984481"
              "0812010430104"),
        Field("3404995412729407025276896700647202470157662602842155788885220578"
              "5171346783162"),
        Field("2345700989319520162686183217527414661504655478998796606881532728"
              "3610815221310"),
        Field("3109294287294185355917124581181768975931467144541973877506485947"
              "3542412725425"),
        Field("5116799220914003442032598978830090225690125083627038961467191040"
              "4888424090333"),
        Field("2367469443165877065961295211566080294796737370150625379766318411"
              "1817857449850"),
        Field("3465144826073652318776269530687742778270252468765361963008"),
        Field("2876118074346741981983478839252516288972317879902138402494047458"
              "8120723734663"),
        Field("1267882965986156059121750719885063580789301664257248207931748295"
              "050157094180"),
        Field("1455937637334548836863895903051418083680066540873523166248709681"
              "6213805910110"),
        Field("4536600106038037654261818789939475193562943510017104110788998512"
              "8915380635994"),
        Field("3229692142198870802889139605582325000583075717517341450017583468"
              "0251941195006"),
        Field("2897886528193098885258590833291181922264399771053967175378833141"
              "6327765963203")};

    // random hidden element secret (toxic waste). we fix it to a
    // constant in order to match against the test vectors
    this->secret = Field("13778279493383315901513166932749987230291710199728570"
                         "152123261818328463629146");

    this->secret_powers_g1 = {
        {BaseField("36854167537133870167810883151830777579616207957825464098945"
                   "78378688607592378376318836054947676345821548104185464507"),
         BaseField("13395065449444764730204713799419212215849338759383496204265"
                   "43736416511423956333506472724655353366534992391756441569")},
        {BaseField("20749965662226492945615097978198189221739861329213084113581"
                   "40896113079536003850694012630431408673580733705096617791"),
         BaseField("20776169388666778595331629779008748452369857341460416596178"
                   "70201535410847474163664062006824876754586584291291275540")},
        {BaseField("29908066896405034961181068491184887680953048361228849374589"
                   "15361027713460409591689021671430152609090653721640806775"),
         BaseField("15069105631190064801231642485088185662289730777561049481656"
                   "05526387811452704182227509354555265743592891256699177447")},
        {BaseField("11623994229753380094658096850046421770851169520142342404026"
                   "11534721365805950787073304245916047514747507357062412420"),
         BaseField("32439913241842824306660774309390158013390581471164196275365"
                   "28847445203118923037149866561100103780253903700544760551")},
        {BaseField("66595550477645955422317691187591228045792600941665863117655"
                   "0711534449750755438228569302251439190379809780541605589"),
         BaseField("15639754518865509584520548319903391700028182018162323764862"
                   "89252647203460244570019694049681767056597843416540080200")},
        {BaseField("13997155334738944346453484434520404070385952861192139915240"
                   "09101772100073848392561767527055222979107182734281429257"),
         BaseField("24801967186118020827532424272070678408955817575006204546556"
                   "73428668098605801043836809939785138234969928618554184939")},
        {BaseField("72198996603356233208233142438023880002035034269949947481094"
                   "0866633976625729399263772964415588210693897376315032210"),
         BaseField("23909713088018334455114179971652675642764792282949811409915"
                   "37842761274654400117722746265926005170825975983654738210")},
        {BaseField("24946452033393671727656887869287695560429335312866283157804"
                   "59840863253114375261836717471927002510598950105128289874"),
         BaseField("22308947402682432087653424099864122493269262968494186222854"
                   "0161286780230155004903395236049749437555611923506858957")},
        {BaseField("13692091156184100189040529930284250299924138421820151450177"
                   "24608932835902017735132442291326610507957006806305596987"),
         BaseField("16697997752614730182918384485633392374605603738670095512703"
                   "85685110329728891027501463328761827882531243313994834792")},
        {BaseField("32324617157201419767841199840089167892367982261722591009915"
                   "24828275951110441373038297570085682311463031127657083499"),
         BaseField("21748585940969090447471146438241363898290310715892941128918"
                   "97914222472713836544371512541030476560224224399906695672")},
        {BaseField("32945190541547333935734520835897537392840680022512314688362"
                   "06591341493107913789146528048543749767535356614865447074"),
         BaseField(
             "10784239041438369956852608259577689512593965753533688873687516562"
             "19548634950458729521798081562106307219496322329732")}};

    // blinding scalars b1, b2, ..., b9. random but fixed to match
    // the python test vectors
    prover_blind_scalars = {Field("80633968928703880558063703697897048577551160"
                                  "44327394765020751373651916505604"),
                            Field("68270264301200565976794531113706823063169483"
                                  "63643792417785314991392447377909"),
                            Field("20903799562102387073359556962112335230020378"
                                  "309596765284572286455779329747315"),
                            Field("27445824854335787523979734401573136947589999"
                                  "159092723101543900479804718923773"),
                            Field("52164479755085410212907573804852358855974754"
                                  "07449078898274648785082871817687"),
                            Field("48720156268681305476740160454555587712391923"
                                  "971264646500554531948708930944069"),
                            Field("21318915166515188286980897071631919826831011"
                                  "87444208330829153527689737950718"),
                            Field("47548532878000795436471885496554996210469829"
                                  "388180983864669623532585348412472"),
                            Field("25345997198725001609008178533933158854206333"
                                  "20379105447254598708515031311667")};

    // Hashes of transcript (Fiat-Shamir heuristic)
    this->beta = Field("3710899868510394644410941212967766116886736137326022751"
                       "891187938298987182388");
    this->gamma = Field("110379303840831945879077096653321168432672740458288022"
                        "49545114995763715746939");
    this->alpha = Field("379799789992747238930717819864848384921111623418803600"
                        "22719385400306128734648");
    this->zeta = Field("4327197228921839935583364394550235027071910395980312641"
                       "5018065799136107272465");
    this->nu = Field("275158598338697752421507265080923414294782807831923791651"
                     "55175653098691426347");
    this->u = Field("1781751143954696684632449211212056577828855388109883650570"
                    "6049265393896966778");

    // Prover Round 1

    // Witness polynomials
    this->W_polys = {// W_polys[a]
                     {
                         Field("65544843968907738099309675635232457297113190625"
                               "65954727825457337492322648073"), // t^0 +
                         Field("32948500085781872641455643871559485192618005894"
                               "853042154825967834821350910602"), // t^1 +
                         Field("45881390778235416653057335020812871593791953167"
                               "194904897994502135810789212158"), // t^2 +
                         Field("21733506116237836259034000970136844665656294154"
                               "820722285692118576560701570202"), // t^3 +
                         Field("65544843968907738099309675635232457297113190625"
                               "65954727825457337492322648063"), // t^4 +
                         Field("45705312676907413054326239314722310412178003523"
                               "796150825755316050920327615864"), // t^5 +
                         Field("45881390778235416685976210868512568622166513708"
                               "728461291561900589081727860734"), // t^6 +
                         Field("44844314713252590040795968599532914049288014275"
                               "85360378933914937574782272359") // t^7
                     },
                     // W_polys[a]
                     {
                         Field("13108968793781547619861935127046491459422638125"
                               "131909455650914674984645296135"), // t^0 +
                         Field("26701543132601498945146394479737583456967318942"
                               "563611087328104827461434190940"), // t^1 +
                         Field("32772421984453869048355408507838609029015494238"
                               "821870097275942011674602504197"), // t^2 +
                         Field("13599340474087270913269318764079985464155297112"
                               "973389232502566508274445532606"), // t^3 +
                         Field("26217937587563095239723870254092982918845276250"
                               "263818911301829349969290592260"), // t^4 +
                         Field("25734332042524691531702487408893143141641031409"
                               "948219651572864520903125521309"), // t^5 +
                         Field("32772421984453869050954267127393848268097696386"
                               "837677180978631363248623976453"), // t^6 +
                         Field("38836534701038919568777280363661219612617457535"
                               "570055673803781543238157124155") // t^7
                     },
                     // W_polys[a]
                     {
                         Field("19663453190672321429792902690569737189133957187"
                               "697864183476372012476967944210"), // t^0 +
                         Field("20106536651950714560943936006683707043835113765"
                               "212154412313674714935702104191"), // t^1 +
                         Field("13108968793781547595172778241271718688141717718"
                               "981742160475365835031441309698"), // t^2 +
                         Field("18246392504049801299811961511777672791578098930"
                               "042302001761141999236289949018"), // t^3 +
                         Field("65544843968907738099309675635232457297113190625"
                               "65954727825457337492322648065"), // t^4 +
                         Field("61114009356123806527913480518568834841881410048"
                               "93593661961261119293373765499"), // t^5 +
                         Field("13108968793781547644551092012821264230703558531"
                               "282076750826463514937849282562"), // t^6 +
                         Field("79715450835132939659004949378677025180891988003"
                               "79587746567580866473215365792") // t^7
                     }};
    // vanishing_poly
    // 52435875175126190479447740508185965837690552500527637822603658699938581184512
    //+ 0 t^1 + 0 t^2 + 0 t^3 + 0 t^4 + 0 t^5 + 0 t^6 + 0 t^7 + 1 t^8
    this->zh_poly = {
        Field("5243587517512619047944774050818596583769055250052763782260365869"
              "9938581184512"), // t^0 +
        Field("0"),             // t^1 +
        Field("0"),             // t^2 +
        Field("0"),             // t^3 +
        Field("0"),             // t^4 +
        Field("0"),             // t^5 +
        Field("0"),             // t^6 +
        Field("0"),             // t^7 +
        Field("1"),             // t^8
    };
    // Witness polynomials blinded by b constants
    // a_poly = blind_polys[0] * zh_poly + W_polys[0]
    this->W_polys_blinded = {
        // W_polys_blinded[a]
        {
            Field("521633331418969076916992549603385292610849231994498001326438"
                  "01046038456454677"), // t^0 +
            Field("248851031929114845856492735017697803348628898505256473898052"
                  "16461169434404998"), // t^1 +
            Field("458813907782354166530573350208128715937919531671949048979945"
                  "02135810789212158"), // t^2 +
            Field("217335061162378362590340009701368446656562941548207222856921"
                  "18576560701570202"), // t^3 +
            Field("655448439689077380993096756352324572971131906256595472782545"
                  "7337492322648063"), // t^4 +
            Field("457053126769074130543262393147223104121780035237961508257553"
                  "16050920327615864"), // t^5 +
            Field("458813907782354166859762108685125686221665137087284612915619"
                  "00589081727860734"), // t^6 +
            Field("448443147132525900407959685995329140492880142758536037893391"
                  "4937574782272359"), // t^7 +
            Field("682702643012005659767945311137068230631694836364379241778531"
                  "4991392447377909"), // t^8 +
            Field("806339689287038805580637036978970485775511604432739476502075"
                  "1373651916505604") // t^9
        },
        // W_polys_blinded[b]
        {
            Field("380990191145719505753299412336593203495231914665668241767106"
                  "72895118507556875"), // t^0 +
            Field("579774357049911187178683751762524822694694063296684580275581"
                  "8371682104443625"), // t^1 +
            Field("327724219844538690483554085078386090290154942388218700972759"
                  "42011674602504197"), // t^2 +
            Field("135993404740872709132693187640799854641552971129733892325025"
                  "66508274445532606"), // t^3 +
            Field("262179375875630952397238702540929829188452762502638189113018"
                  "29349969290592260"), // t^4 +
            Field("257343320425246915317024874088931431416410314099482196515728"
                  "64520903125521309"), // t^5 +
            Field("327724219844538690509542671273938482680976963868376771809786"
                  "31363248623976453"), // t^6 +
            Field("388365347010389195687772803636612196126174575355700556738037"
                  "81543238157124155"), // t^7 +
            Field("274458248543357875239797344015731369475899991590927231015439"
                  "00479804718923773"), // t^8 +
            Field("209037995621023870733595569621123352300203783095967652845722"
                  "86455779329747315") // t^9
        },
        // W_polys_blinded[c]
        {
            Field("233791720971172064325004827442001153144325857169608555055254"
                  "98763706618184654"), // t^0 +
            Field("148900886764421735396531786261984711582376383577630755140390"
                  "25929852830286504"), // t^1 +
            Field("131089687937815475951727782412717186881417177189817421604753"
                  "65835031441309698"), // t^2 +
            Field("182463925040498012998119615117776727915780989300423020017611"
                  "41999236289949018"), // t^3 +
            Field("655448439689077380993096756352324572971131906256595472782545"
                  "7337492322648065"), // t^4 +
            Field("611140093561238065279134805185688348418814100489359366196126"
                  "1119293373765499"), // t^5 +
            Field("131089687937815476445510920128212642307035585312820767508264"
                  "63514937849282562"), // t^6 +
            Field("797154508351329396590049493786770251808919880037958774656758"
                  "0866473215365792"), // t^7 +
            Field("487201562686813054767401604545555877123919239712646465005545"
                  "31948708930944069"), // t^8 +
            Field("521644797550854102129075738048523588559747540744907889827464"
                  "8785082871817687") // t^9
        }};
    // blinded witness polynomials evaluate at secret input
    this->W_polys_blinded_at_secret_g1 = {
        // W_polys_blinded_at_secret_g1[a] (x,y)
        {BaseField("14812287891036618330676930721693823329702411523226156376233"
                   "17748273515137146902630034361568804034167204753099284501"),
         BaseField("17964750299387068157283823706566054419626655811998147128959"
                   "26933741011033298072747963710561309706677692173630366237")},
        // W_polys_blinded_at_secret_g1[b] (x,y)
        {BaseField("29432220588068977731172413919004940878073922894991625118592"
                   "59126805842169805910975063699386916233854515174105508725"),
         BaseField("14617147990844911049525808735959595358829529410173698594487"
                   "62515518178805418879678173039509762385815865920800988196")},
        // W_polys_blinded_at_secret_g1[c] (x,y)
        {BaseField("14391627324702662166442733543984684422882998027578504520373"
                   "12698084674043069817398172864897193109985787550989102559"),
         BaseField(
             "29011633872445735455259638237873043070766218287795562103418244491"
             "41545494290892417899030834624333222271719003612974")}};
    // Prover Round 2
    // accumulatro polynomial
    this->A_poly = {
        Field("2518625392737982296343610325189127807488571368919632517794638553"
              "2342220728117"), // t^0 +
        Field("3343004226366800205137468684843812026286862538920524966872869345"
              "3463660552682"), // t^1 +
        Field("1204771288456474927231408409787544475988184671052023508676578841"
              "2377967852364"), // t^2 +
        Field("1654220606090652573608134811761648464025584860436467340851483101"
              "8718382023477"), // t^3 +
        Field("2783712845267402774526728481246187236057799933701726441152811280"
              "4611642359798"), // t^4 +
        Field("3732208461409147234788564051800623612946480973700210337990448546"
              "1155139003575"), // t^5 +
        Field("6413652480339839192085204403325965541536359421783588217290146845"
              "390811835496"), // t^6 +
        Field("5096442001688032260934660998312846158129100711302111193973619127"
              "1694500382544"), // t^7
    };
    // blinded accumulator poly z(x)
    this->z_poly = {
        Field("2265165420750732280253528539849796218946508036881721973069178682"
              "3827189416450"), // t^0 +
        Field("3831738456079339709435054186006908989008934850155190362666272862"
              "0816893324723"), // t^1 +
        Field("9915821367913230443615994390712252777198745523076026755936634884"
              "688229901646"), // t^2 +
        Field("1654220606090652573608134811761648464025584860436467340851483101"
              "8718382023477"), // t^3 +
        Field("2783712845267402774526728481246187236057799933701726441152811280"
              "4611642359798"), // t^4 +
        Field("3732208461409147234788564051800623612946480973700210337990448546"
              "1155139003575"), // t^5 +
        Field("6413652480339839192085204403325965541536359421783588217290146845"
              "390811835496"), // t^6 +
        Field("5096442001688032260934660998312846158129100711302111193973619127"
              "1694500382544"), // t^7 +
        Field("2534599719872500160900817853393315885420633320379105447254598708"
              "515031311667"), // t^8 +
        Field("4754853287800079543647188549655499621046982938818098386466962353"
              "2585348412472"), // t^9 +
        Field("2131891516651518828698089707163191982683101187444208330829153527"
              "689737950718"), // t^10
    };
    // blinded accumulator poly z(x) evaluated at secret
    this->z_poly_at_secret_g1 = {
        BaseField("218229772328487280905090401999839431733408937653957673318017"
                  "4184484710730756128092226245721766481877396312865768304"),
        BaseField("292507928406344683037670492963483727823750442012637110834805"
                  "8274997491709275417542814945756255382474849922144871524")};
    // Prover Round 3
    // t_poly_at_secret_g1: t(x) evaluated at the secret input zeta i.e. t(zeta)
    this->t_poly_at_secret_g1 = {
        // t_poly_at_secret_g1[0] (x,y)
        {BaseField("36334753045440395809371680338918211810312700289483151569664"
                   "30357290637750912918602224358395819959043217498580613188"),
         BaseField("14280901549512618100167591929669036233606392208611617045103"
                   "58440208878251190328471919089961503194904379492282570328")},
        // t_poly_at_secret_g1[1] (x,y)
        {BaseField("76363409032225954376660766997910850260552039791217261961132"
                   "3329140740033948682915660599655604319492439350037062593"),
         BaseField("28136783837059300064723980127085168126317661898643574293043"
                   "41222779755096333176883586053913173384834727806732577514")},
        // t_poly_at_secret_g1[2] (x,y)
        {BaseField("11337733321199745710063881143204871341221284322923746136104"
                   "71191239740936855771046194807037399513728603857921779020"),
         BaseField(
             "23717433852493404330471742080754816727740110188452404228212413264"
             "03735375534578397825283190840736410689009347296342")}};
    // z_poly_xomega: the polynomial z(x*w) i.e. z(x) shifted by w
    this->z_poly_xomega = {
        Field("2265165420750732280253528539849796218946508036881721973069178682"
              "3827189416450"), // t^0 +
        Field("3522707332061080835798112609163881083507261400618189899676704579"
              "1350279877954"), // t^1 +
        Field("3309030535278527195951493880213970747872492878590839259324563659"
              "7703335115887"), // t^2 +
        Field("4088099918379397647346118061563173960283766613891904952309372247"
              "5099935064612"), // t^3 +
        Field("2459874672245216273418045569572409347711255316351037341107554589"
              "5326938824715"), // t^4 +
        Field("3130512625781403637138050922833186963879103219436289731932477576"
              "1009602152629"), // t^5 +
        Field("5012222053129571007016945989949647333098134542190693273050557821"
              "1550198923184"), // t^6 +
        Field("3064349268741886919262515885662041664089860259376571962820647628"
              "4834360312181"), // t^7 +
        Field("2534599719872500160900817853393315885420633320379105447254598708"
              "515031311667"), // t^8 +
        Field("1419615120215068486878184007202189531439457176459524671730274215"
              "4033633385750"), // t^9 +
        Field("1019842429205845332898215495550756855277887015561016627161000987"
              "5240306916807") // t^10
    };
    // t_poly: the quotient polynomial t(x) (see Round 3, pp28 [GWC19]),
    this->t_poly_long = {
        Field("1613850149506400547772007762591425736533070021337736890758518750"
              "3110317398551"), // t^0 +
        Field("3040368902288718889983204820945380652817775664997775098304580225"
              "9681526185231"), // t^1 +
        Field("1042102470564703322665398547899923945819513306900065157914357111"
              "3800640238933"), // t^2 +
        Field("1633462087831609539968808827529008330124698299502354144702821124"
              "4300088022199"), // t^3 +
        Field("3632784646360485930553771159655097618380845063905226267905837784"
              "5835048276810"), // t^4 +
        Field("3656196858094264844695875765748620979140837444590225078292098611"
              "0855788988433"), // t^5 +
        Field("4523255421893679400053241195748570388235240684403702464129656520"
              "043856004349"), // t^6 +
        Field("1002647493544172661013146016776665819687146794207805535060529180"
              "6843077939272"), // t^7 +
        Field("3548121107888953018916580962039584646709578854362089670366763654"
              "2576580345734"), // t^8 +
        Field("2297931724833055633330038364258628456490770251522597328783342991"
              "5658557329963"), // t^9 +
        Field("6252854478478019668247055899364396160278584256715602663448250419"
              "916088342384"), // t^10 +
        Field("2407613143858867391555076078532805439108651463880076324787621056"
              "1552682158710"), // t^11 +
        Field("3674667163620429559371781226732735616050875001211632077958321530"
              "694677958113"), // t^12 +
        Field("1942412489095028244973144301361474632107814650518722125151606411"
              "7233674898523"), // t^13 +
        Field("4005762677304860945679708501660985182956740054316240488989084561"
              "2848784733039"), // t^14 +
        Field("1931303367871217529389379259233466201562729351133418057091284445"
              "3652385236582"), // t^15 +
        Field("2221817730104195391229605776246015275856933020723204442957788785"
              "1871298997907"), // t^16 +
        Field("3588159848730797308072409316494361587812978320894884007923341012"
              "0898701096353"), // t^17 +
        Field("1310205747596608722863298127271181852811202233900209260215326001"
              "1136972622921"), // t^18 +
        Field("8560623145505212661032016828864500149385317605488145618652908867"
              "288785811948"), // t^19 +
        Field("4065894564211273790799140230700764854860230755995745210191240729"
              "3426046132023"), // t^20 +
        Field("5081908704900564950804424995622495124460340656509539811225297312"
              "5211073271073"), // t^21 +
        Field("4666457525759582528402241552791202565704683710647774067806134699"
              "2623383015707"), // t^22 +
        Field("4306907993838530907933054915935228091472808577800496469450130926"
              "3755728838047"), // t^23 +
        Field("4947724791243297456277917191608867362506589718656153051429472063"
              "9066541459749"), // t^24 +
        Field("2087040818294080218293142955185975472708718151197964942361522282"
              "2038546839608"), // t^25 +
        Field("1458546107620775338054728063563476188812102450800490940500969838"
              "6466329925772"), // t^26 +
        Field("7078989131341788220225651051808493470990658902234100299184940135"
              "97364414823"), // t^27 +
        Field("2984093618809324090683329124882124934996621572654997040583232120"
              "5298097143557"), // t^28 +
        Field("6188816264874193895800450614104712986342233687836446073160843161"
              "893236587105") // t^29
    };
    // t_poly_long: t(x), divided in three parts t(x), = t_lo(x), +
    // t_mid(x), x^n + t_hi(x), x^{2n}
    this->t_poly = {// ft_lo
                    {
                        Field("161385014950640054777200776259142573653307002133"
                              "77368907585187503110317398551"), // t^0 +
                        Field("304036890228871888998320482094538065281777566499"
                              "77750983045802259681526185231"), // t^1 +
                        Field("104210247056470332266539854789992394581951330690"
                              "00651579143571113800640238933"), // t^2 +
                        Field("163346208783160953996880882752900833012469829950"
                              "23541447028211244300088022199"), // t^3 +
                        Field("363278464636048593055377115965509761838084506390"
                              "52262679058377845835048276810"), // t^4 +
                        Field("365619685809426484469587576574862097914083744459"
                              "02250782920986110855788988433"), // t^5 +
                        Field("452325542189367940005324119574857038823524068440"
                              "3702464129656520043856004349"), // t^6 +
                        Field("100264749354417266101314601677666581968714679420"
                              "78055350605291806843077939272"), // t^7 +
                        Field("354812110788895301891658096203958464670957885436"
                              "20896703667636542576580345734"), // t^8 +
                        Field("229793172483305563333003836425862845649077025152"
                              "25973287833429915658557329963") // t^9
                    },
                    // t_mid
                    {
                        Field("625285447847801966824705589936439616027858425671"
                              "5602663448250419916088342384"), // t^0 +
                        Field("240761314385886739155507607853280543910865146388"
                              "00763247876210561552682158710"), // t^1 +
                        Field("367466716362042955937178122673273561605087500121"
                              "1632077958321530694677958113"), // t^2 +
                        Field("194241248909502824497314430136147463210781465051"
                              "87221251516064117233674898523"), // t^3 +
                        Field("400576267730486094567970850166098518295674005431"
                              "62404889890845612848784733039"), // t^4 +
                        Field("193130336787121752938937925923346620156272935113"
                              "34180570912844453652385236582"), // t^5 +
                        Field("222181773010419539122960577624601527585693302072"
                              "32044429577887851871298997907"), // t^6 +
                        Field("358815984873079730807240931649436158781297832089"
                              "48840079233410120898701096353"), // t^7 +
                        Field("131020574759660872286329812727118185281120223390"
                              "02092602153260011136972622921"), // t^8 +
                        Field("856062314550521266103201682886450014938531760548"
                              "8145618652908867288785811948") // t^9
                    },
                    // t_hi
                    {
                        Field("406589456421127379079914023070076485486023075599"
                              "57452101912407293426046132023"), // t^0 +
                        Field("508190870490056495080442499562249512446034065650"
                              "95398112252973125211073271073"), // t^1 +
                        Field("466645752575958252840224155279120256570468371064"
                              "77740678061346992623383015707"), // t^2 +
                        Field("430690799383853090793305491593522809147280857780"
                              "04964694501309263755728838047"), // t^3 +
                        Field("494772479124329745627791719160886736250658971865"
                              "61530514294720639066541459749"), // t^4 +
                        Field("208704081829408021829314295518597547270871815119"
                              "79649423615222822038546839608"), // t^5 +
                        Field("145854610762077533805472806356347618881210245080"
                              "04909405009698386466329925772"), // t^6 +
                        Field("707898913134178822022565105180849347099065890223"
                              "410029918494013597364414823"), // t^7 +
                        Field("298409361880932409068332912488212493499662157265"
                              "49970405832321205298097143557"), // t^8 +
                        Field("618881626487419389580045061410471298634223368783"
                              "6446073160843161893236587105") // t^9
                    }};
    // Prover Round 4
    this->a_zeta = Field("89018754633263103134565706528698737767467674290012895"
                         "06712732994487869455294");
    this->b_zeta = Field("17059370482702287697833061796226204248201565415155528"
                         "923232473993993212080397");
    this->c_zeta = Field("24097569659300085566963716541699131253974499863725226"
                         "36184003898699439708220");
    this->S_0_zeta = Field("461436261558032879183302794283908482860766454284773"
                           "53060129573054942492588828");
    this->S_1_zeta = Field("243927046358912523431432696335637683451450085201403"
                           "60299402842967762646340846");
    this->t_zeta = Field("17704211079697158667898451781925539666888780633357685"
                         "549668669638883218786797");
    this->z_poly_xomega_zeta = Field("28842520748921749858267479462666161290723"
                                     "351257502457358354355079408206613634");
    // Prover Round 5
    // linearisation polynomial r(x)
    this->r_poly = {
        Field("2603512055252796692071737904087507556829684549510721336678959715"
              "7169046865340"), // t^0 +
        Field("3942753965961071766143624447190676478891460844964486462800593298"
              "0154778950407"), // t^1 +
        Field("1743566792151933472376808485105574264437105927288539768954931379"
              "3693366950787"), // t^2 +
        Field("4942865003799481471749027521378523306396518062429387236185665079"
              "8295465747357"), // t^3 +
        Field("4415918367620933880836129889969775566105477399880154139724106878"
              "707122735424"), // t^4 +
        Field("8948900433568314567249974508827746248263244175570022612023712197"
              "372700744447"), // t^5 +
        Field("2960702973715822632300470900105704342347090742964455410397076921"
              "9991866925475"), // t^6 +
        Field("4140950340042081861784876195481408717940244394208041020815793396"
              "987141178934"), // t^7 +
        Field("4030038061106409199760524044467210289705742219665913488385521773"
              "2857702756316"), // t^8 +
        Field("4793378445006658536717368078811814461230636700375498945907637919"
              "9822825835746"), // t^9 +
        Field("2288087964390040455243247170114287577194614314265017877490312785"
              "1353091457234") // t^10
    };
    // linearisation polynomial evaluated at x=zeta ie. r(zeta)
    this->r_zeta = Field("98401833553540757648601291397401878521368727319456218"
                         "53688663309524905254695");
    // opening proof polynomial W_zeta(x)
    this->W_zeta = {
        Field("2425208075861302430388734364060671625126106358899275231917791230"
              "8896977829530"), // x^0 +
        Field("1060760789872469863243912303046696427113635606636800367079996536"
              "1976876241434"), // x^1 +
        Field("4945570090835204155867856741605638033127077675733215306305597163"
              "4526190286005"), // x^2 +
        Field("3332027100358956385527160855090111765264327736597228066927830862"
              "6702032462766"), // x^3 +
        Field("1585236647926224968598276457268065881132907825354517423594189230"
              "0400403939930"), // x^4 +
        Field("2768243031239845689523160572736932993927651703690421976097490318"
              "4897420916090"), // x^5 +
        Field("3408971485363305489368119320301696605838015578921377320829539984"
              "918748131464"), // x^6 +
        Field("6170013496654113309991805083384693399451071882671661442964650981"
              "706324964718"), // x^7 +
        Field("4046651207853235565358275015621115513666336518059676997543319340"
              "6332496460952"), // x^8 +
        Field("2779755100662473972439074429356997821277920509470931427485728915"
              "1379644029144") // x^9
    };
    // opening proof polynomial W_{zeta omega}(x)
    this->W_zeta_omega = {
        Field("4053156463693497745052164515731838082731509222453505556234840603"
              "5588261107649"), // x^0 +
        Field("4058277206829669744576668736724647055016570296582250369803518901"
              "3689327598242"), // x^1 +
        Field("3469229733620729618347120395255874659028106129936335068581145823"
              "3238031608744"), // x^2 +
        Field("3672976997032667925860661999685787149672966747083938789879739560"
              "7660186144417"), // x^3 +
        Field("3920037723815253535315325165819311372867884025491460418913281378"
              "9688481911843"), // x^4 +
        Field("3780677159511070124578530692688093256358861446957732007938945605"
              "6927918503907"), // x^5 +
        Field("3008905681484411520937149759836469023029665120031639147269349017"
              "3328399559224"), // x^6 +
        Field("5019223596666837703964065504139865465420595258667351312020460215"
              "9086894893773"), // x^7 +
        Field("5046455272607465584094271013540888943906468773469964673357231746"
              "9624082573673"), // x^8 +
        Field("2131891516651518828698089707163191982683101187444208330829153527"
              "689737950718") // x^9
    };
    // commitment to opening proof polynomial W_zeta(x) at secert input
    // i.e. [W_zeta(secret)]_1 (represented as a point on the curve as a
    // pair of X,Y coordinates (values in the base field))
    this->W_zeta_at_secret = {
        BaseField("870060484392950318936407436339281693869104302033433437217724"
                  "352106918879203859031480272360445121364037832041952039"),
        BaseField("861299420568581680683022801956519699850698057581115592449001"
                  "068617883576936792838745784184017332399410405735556637")};
    // commitment to opening proof polynomial W_{zeta omega}(x) at
    // secert input i.e. [W_{zeta omega}(secret)]_1
    this->W_zeta_omega_at_secret = {
        BaseField("655495718420813899433022178744291341055707361726913326276228"
                  "363256669650441492160760400814686050651569669287015855"),
        BaseField("229481443404822103284044189219285257403125043021601137826232"
                  "4574002174077316300644184560707652291246729455056384738")};
    // Verifier precomputation
    this->Q_polys_at_secret_g1 = {
        // Q_polys_at_secret_G1[0](x, y)
        {BaseField("37872638117646271814730035813573941475040188186517949668804"
                   "5184488721729111812849671928978444183306485908524284480"),
         BaseField("79183321462482392539235348002489945030682397254523366395010"
                   "2448253555712343824442312037763251986444707559468789167")},
        // Q_polys_at_secret_G1[1](x, y)
        {BaseField("34631210648960787533875729378285482931236025064470116389646"
                   "95206791719047814189335281941216929475385990343236354767"),
         BaseField("37560055274848745758731228857694331283955625702810481826014"
                   "69211783316382910994832150136370603197748628978251617855")},
        // Q_polys_at_secret_G1[2](x, y)
        {BaseField("38929455936321242573458158228059689667920715759118216184118"
                   "50268364131846825179296155052328167376852966904585186447"),
         BaseField("14387651874046990029377825249761966997493481734049336060559"
                   "94266712582628388073773207681042085983472030360245506053")},
        // Q_polys_at_secret_G1[3](x, y)
        {BaseField("21395203688591242318834236925149705288598122582999309763678"
                   "81008205428239812556102432321082924215659317599549354780"),
         BaseField("31608016701108926123111249555539915826675093054796279958192"
                   "54406979123526107121808691993608981196593224342875940517")},
        // Q_polys_at_secret_G1[4](x, y)
        {BaseField("14947061974880505484736471897005901630187100836190498942013"
                   "40042906428954701970245565963571442231938653450961032544"),
         BaseField(
             "28246023002329815495890687586581650096148528539495759217955996750"
             "03541734658829364117937951492488210759581945412529")}};
    this->S_polys_at_secret_g1 = {
        // S_polys_at_secret_G1[0](x, y)
        {BaseField("36368078628695840142519314182027223097391859322500348523037"
                   "5359988783103495068430872040401356145672343538149573956"),
         BaseField("38086117155279067619957746135328045145411168060473709058159"
                   "23618967460517724494838454007652229237779324980791026678")},
        // S_polys_at_secret_G1[1](x, y)
        {BaseField("22692902817920796240439217704871520306588775874145333548088"
                   "21851134353908789851247370093633774252241702882912887085"),
         BaseField("12029919948961427716735907593948285124581150685050417216921"
                   "00348489247274098109255301291346677656642600399089495236")},
        // S_polys_at_secret_G1[2](x, y)
        {BaseField("14092796445922828479110756772232507484316624225197532585861"
                   "36046888366320164223401617201095933133577003578716884726"),
         BaseField(
             "17392526753346659131838574196457588111148361438835640062331721065"
             "01577251543276680000254892836167925142291524692240")}};
    // Verifier Step 5: vanishing polynomial evaluation at zeta
    this->zh_zeta = Field("3231291541068425176363304614853753627837086743398580"
                          "603659947674812058489341");
    // Verifier Step 6: compute Lagrange polynomial evaluation L1(zeta)
    this->L_0_zeta = Field("249023502880157597838915072978532235843469796520075"
                           "92864411578966192407598153");
    // Verifier Step 7: evaluate public input polynomial at zeta
    this->PI_zeta = Field("5213191382864624158721462223282140052666923997678483"
                          "8364162926303506898992750");
    // Verifier Step 8: compute quotient polynomial evaluation r'(zeta) =
    // r(zeta) - r0, where r0 is a constant term
    this->r_prime_zeta = Field("17704211079697158667898451781925539666888780633"
                               "357685549668669638883218786797");
    // Verifier Step 9
    this->D1 = {
        // (x,y)
        BaseField("295055128993514571465051427628530985500804633619823829912294"
                  "3701060700368614623093700969937886225712332445422779232"),
        BaseField("177357457743368679564228713000738451950615223042556119935832"
                  "0811214796879879223471447420612658036440896892253660321")};
    // Verifier Step 10: compute full batched polynomial commitment
    this->F1 = {
        // (x,y)
        BaseField("182674249211586861258228800954744156123303054902439656689558"
                  "7306861582709499257146203756040438377200227370973259986"),
        BaseField("317469800320460430597039038149214739328961296782892898627772"
                  "0440012247826580102584515518061223894220403192017952478")};
    // Verifier Step 11: compute group-encoded batch evaluation [E]_1
    this->E1 = {
        // (x,y)
        BaseField("896211057343888615494168233046980277322670342780717794143414"
                  "541657336321268995118530971981505762603044924183423639"),
        BaseField("243066919022843377501447737580021700365442316598462908640891"
                  "9423216148134888225770566675462506053600277852687652642")};
    // Verifier Step 12: batch validate all evaluations via pairing
    this->pairing_first_lhs = {
        // (x,y)
        BaseField("259441502792996125537510028389383648449414919567783080548752"
                  "7382596454063206138678026974672787696177127251762793677"),
        BaseField("235250982894607804932611639285546907420234209359655517101542"
                  "1209941442208769351281087086741535791209871063622971343")};
    this->pairing_first_rhs = {
    // (x,y)
#if 0  // pairing check e() = e()
       BaseField("2786086768974850272772873952573647917824800608941506526890251802946860616723974417792544909526285497672211326145554"),
       BaseField("3322299130191197851913727020573383402853736418546119609247136782819928908204641650829975455690084120791575793280234")
#endif // #if 0 // pairing check e() = e()
       // (x,y)^-1
#if 1  // pairing check e() * e()^-1 = 1
        BaseField("278608676897485027277287395257364791782480060894150652689025"
                  "1802946860616723974417792544909526285497672211326145554"),
        BaseField("680110425030469541504062805162520753703146401392888276084921"
                  "353304102742286196213612712173438931543246318479279553")
#endif // #if 1 // pairing check e() * e()^-1 = 1
    };
}

} // namespace libsnark

#endif // LIBSNARK_ZK_PROOF_SYSTEMS_PLONK_TESTS_EXAMPLE_TCC_
